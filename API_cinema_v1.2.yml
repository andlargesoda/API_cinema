openapi: '3.0.3'
info:
  title: Кинотеатр «Искорка» API
  description: Описание сервиса кинотеатра Искорка. При помощи сервиса можно проверить наличие мест на сеанс, забронировать место, отменить бронь, изменить время сеанса
  termsOfService: https://iskorkacinema.ru/terms
  contact:
    name: Команда поддержки API
    url: https.//www.iskorkacinema.ru/support
    email: support@iskorkacinema.ru
  license:
    name: unlicensed
    url: "https.//www.example.ru"
  version: '1.0'
servers:
  - url: https://dev-api.iskorkacinema.ru/v1
    description: Сервер API среды разработки
  - url: https://test-api.iskorkacinema.ru/v1
    description: Сервер API среды тестирования
  - url: https://preprod-api.iskorkacinema.ru/v1
    description: Сервер API предпродуктивной среды
  - url: https://api.iskorkacinema.ru/v1
    description: Сервер API продуктивной среды
tags:
  - name: Сеансы
    description: Управление сеансами в кинотеатре
  - name: Брони
    description: Управление бронями в кинотеатре
  - name: Администратор
    description: Действия администратора    
paths:
  # === Управление сеансами в кинотеатре ===
  /sessions:
    get:
      tags: [Сеансы]
      summary: Получение списка сеансов
      description: Метод предназначен для получения списка сеансов с описанием основной информации
      externalDocs:
        description: Ознакомиться с информацией можно по ссылке ниже
        url: https://iskorkacinema.ru/docs
      operationId: getSessions
      parameters:
        - name: sessionDate
          in: query
          schema:
            $ref: '#/components/schemas/SessionDate'
        - name: sessionFormat
          in: query
          schema:
            $ref: '#/components/schemas/SessionFormat'
        - name: moviename
          in: query
          schema:
            $ref: '#/components/schemas/MovieName'
        - name: genre
          in: query
          schema:
            $ref: '#/components/schemas/Genre'
        - name: hallType
          in: query
          schema:
            $ref: '#/components/schemas/HallType'
        - name: hallName
          in: query
          schema:
            $ref: '#/components/schemas/HallName'
        - name: limit
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PagenatedSessions'                    
            application/xml:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/PagenatedSessions'
                xml:
                  name: user
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'    
        '500':
          $ref: '#/components/responses/InternalServerError'                                                            
  /sessions/{sessionId}/seats:
    get:
      summary: Проверка доступных мест
      description: Метод предназначен для получения информации о свободных местах для выбранного сеанса
      tags: [Сеансы]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SessionId'
        - name: limit
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Limit'
        - name: offset
          in: query
          required: false
          schema:
            $ref: '#/components/schemas/Offset'
      responses:
        '200':
          description: OK
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/PagenatedSeats'
            application/xml:
              schema:
                $ref: '#/components/schemas/PagenatedSeats'
                xml:
                  name: user
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'    
        '500':
          $ref: '#/components/responses/InternalServerError' 
  # === Управление бронями в кинотеатре ====
  /bookings:
    post:
      summary: Бронирование места 
      description: Метод предназначен для бронирования места на сеансе
      tags: [Брони]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Данные бронирования от пользователя
              properties:
                sessionId:
                  $ref: '#/components/schemas/SessionId'           
                seatId:
                  $ref: '#/components/schemas/SeatId' 
                userId:
                  $ref: '#/components/schemas/UserId'
                BonusCardId:
                  $ref: '#/components/schemas/BonusCardId'
                UsedNumberBonusPoints:
                  $ref: '#/components/schemas/UsedNumberBonusPoints'
          application/xml:
            schema:
              type: object
              description: Данные бронирования от пользователя
              properties:
                sessionId:
                  $ref: '#/components/schemas/SessionId'           
                seatId:
                  $ref: '#/components/schemas/SeatId' 
                userId:
                  $ref: '#/components/schemas/UserId'
                BonusCardId:
                  $ref: '#/components/schemas/BonusCardId'
                UsedNumberBonusPoints:
                  $ref: '#/components/schemas/UsedNumberBonusPoints'
              xml:
                name: user                         
      responses:
        '201':
          description: Бронь успешно создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Booking'
            application/xml:
              schema:
                $ref: '#/components/schemas/Booking'
                xml:
                  name: user                                                                                                                              
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'    
        '500':
          $ref: '#/components/responses/InternalServerError'            
  /bookings/{bookingId}:
    delete:
      summary: Отмена бронирования
      description: Метод предназначен для отмены существующего бронирования
      tags: [Брони]
      parameters:
        - name: bookingId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/BookingId'
      responses:
        '204':
          description: Бронирование успешно отмененено
          content:
            application/json:
              schema:
                type: object
                properties:
                  schema:
                    $ref: '#/components/schemas/BookingId'
                  status:
                    $ref: '#/components/schemas/Status'
            application/xml:
              schema:
                type: object
                properties:
                  schema:
                    $ref: '#/components/schemas/BookingId'
                  status:
                    $ref: '#/components/schemas/Status'
                xml:
                  name: user                                                                   
        '400':
          $ref: '#/components/responses/BadRequest'          
        '404':
          $ref: '#/components/responses/NotFound'    
        '500':
          $ref: '#/components/responses/InternalServerError'                                       
  # === Управление бонусными картами кинотеатра ===
  /bonusCards:
    post:
      summary: Создания бонусной карты
      description: Метод предназначен для создания бонусной карты
      tags: [Бонусные карты]
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              description: Данные от пользователя
              properties:
                userId:
                  $ref: '#/components/schemas/UserId'
          application/xml:
            schema:
              type: object
              description: Данные от пользователя
              properties:
                userId:
                  $ref: '#/components/schemas/UserId'
              xml:
                name: user                         
      responses:
        '201':
          description: Бонусная карта создана
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusCards'
            application/xml:
              schema:
                $ref: '#/components/schemas/BonusCards'
                xml:
                  name: user                                                                                                                              
        '400':
          $ref: '#/components/responses/BadRequest'
        '404':
          $ref: '#/components/responses/NotFound'    
        '500':
          $ref: '#/components/responses/InternalServerError'  
  /bonusCards/{BonusCardId}:
    get:
      summary: Получение количества бонусных баллов на карте
      description: Метод предназначен для получения текущего количества бонусных баллов на карте
      tags: [Бонусные карты]
      parameters:
        - name: BonusCardId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/BonusCardId' 
      responses:
        '200':
          description: Баланс бонусной карты получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusCards'
            application/xml:
              schema:
                $ref: '#/components/schemas/BonusCards'
                xml:
                  name: user                            
  # === Действия администратора ===
  /admin/sessions/{sessionId}:
    patch:
      summary: Изменение время сеанса
      description: Метод предназначен для изменения время сеансы администратором кинотеатра
      security:
        - OAuth: [admin]
      tags: [Администратор]
      parameters:
        - name: sessionId
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/SessionId'
      requestBody:
        content:
          application/json:
            schema:
              type: object
              description: Информация о сеансе
              properties:
                sessionDate:
                  $ref: '#/components/schemas/SessionDate'               
                sessionStartTime:
                  $ref: '#/components/schemas/SessionStartTime'
                sessionEndTime:
                  $ref: '#/components/schemas/SessionEndTime'
          application/xml:
            schema:
              type: object
              description: Информация о сеансе
              properties:
                sessionDate:
                  $ref: '#/components/schemas/SessionDate'               
                sessionStartTime:
                  $ref: '#/components/schemas/SessionStartTime'
                sessionEndTime:
                  $ref: '#/components/schemas/SessionEndTime'
              xml:
                name: user                 
      responses:
        '200':
          description: Время сеанса успешно обновлено
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Session'
            application/xml:
              schema:
                $ref: '#/components/schemas/Session' 
                xml:
                  name: user                                      
        '400':
          $ref: '#/components/responses/BadRequest'         
        '401':
          $ref: '#/components/responses/Unauthorized'   
        '403':
          $ref: '#/components/responses/Forbidden'    
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'                                                
  /admin/bonusCardReports/bonusCardReportDate:
    get:
      summary: Получение ежемесячного отчета по бонусной программе
      description: Метод предназначен для получения отчета бонусной программы за указанный месяц
      security:
        - OAuth: [admin]
      tags: [Администратор]
      parameters:
        - name: bonusCardReportDate
          in: query
          required: true
          schema:
            $ref: '#/components/schemas/BonusCardReportDate'
      responses:
        '200':
          description: Отчет бонусной программы за указанный месяц получен
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/BonusCardReport'
            application/xml:
              schema:
                $ref: '#/components/schemas/BonusCardReport' 
                xml:
                  name: user                                      
        '400':
          $ref: '#/components/responses/BadRequest'         
        '401':
          $ref: '#/components/responses/Unauthorized'   
        '403':
          $ref: '#/components/responses/Forbidden'    
        '404':
          $ref: '#/components/responses/NotFound'
        '500':
          $ref: '#/components/responses/InternalServerError'  
components:
  schemas:      
  # === PagenatedSessions ===
    PagenatedSessions:
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: '#/components/schemas/Session'
        pagination:
          $ref: '#/components/schemas/Pagination'      
  # === PagenatedSeats ===     
    PagenatedSeats:
      type: object
      properties:
        data: 
          type: array
          items:
            $ref: '#/components/schemas/StatusSeats'
        pagination:
          $ref: '#/components/schemas/Pagination'    
    AvailableSeats:
      type: object
      properties:
        sessionId:
          $ref: '#/components/schemas/SessionId'
        seats:
          type: array
          items:
            $ref: '#/components/schemas/StatusSeats'
    StatusSeats:
      type:  object
      properties:
          seatId:
            $ref: '#/components/schemas/SeatId'
          rowNumber:
            $ref: '#/components/schemas/RowNumber' 
          seatNumber:
            $ref: '#/components/schemas/SeatNumber'
          status:
            type: string
            enum:
              - available
              - booked      
  # === Pagination ===
    Pagination:
      type: object
      description: Получение списка элементов с пагинацией
      required:
        - limit
        - offset
        - totalCount
      properties:
        Limit:
          $ref: '#/components/schemas/Limit'
        Offset:
          $ref: '#/components/schemas/Offset'
        TotalCount:
          $ref: '#/components/schemas/TotalCount'   
    Limit:
      type: integer
      description: Количество элементов на странице
      minimum: 1
      maximum: 100
      default: 10
    Offset:
      type: integer
      description: Смещение (начальная позиция)
      minimum: 0
      default: 0
    TotalCount:
      type: integer
      description: Общее количество элементов      
  # === Movie ===
    Movie:
      type: object
      description: Информация о фильме
      properties:
        MovieId:
          $ref: '#/components/schemas/MovieId'
        MovieName:
          $ref: '#/components/schemas/MovieName'
        Genre:
          $ref: '#/components/schemas/Genre'
        CountryProduction:
          $ref: '#/components/schemas/CountryProduction'
        ReleaseDate:
          $ref: '#/components/schemas/ReleaseDate'
        AgeRating:
          $ref: '#/components/schemas/AgeRating'
        Duration:
          $ref: '#/components/schemas/Duration'
        Plot:
          $ref: '#/components/schemas/Plot'
    MovieId:
      type: integer
      format: int64
      description: Идентификатор фильма
      example: 456              
    MovieName:
      type: string
      description: Наименование фильма
      example: Интерстеллар            
    Genre:
      type: string
      description: Жанр
      example: Фантастика                
    CountryProduction:
      type: string
      description: Страна производства
      example: США    
    ReleaseDate:
      type: string
      format: date
      description: Год выхода
      example: {}      
    AgeRating:
      type: string
      enum:
        - 6+
        - 12+
        - 16+
        - 18+
      description: Возрастной рейтинг
      example: 16+            
    Duration:
      type: string
      description: Продолжительность, мин
      example: 140              
    Plot:
      type: string
      description: Сюжет
      example: Фильм о космчиеских путешествиях      
  # === Hall ===
    Hall:
      type: object
      description: Информация о зале кинотеатра
      properties:
        HallId:
          $ref: '#/components/schemas/HallId'
        HallName:
          $ref: '#/components/schemas/HallName'
        Capacity:
          $ref: '#/components/schemas/Capacity'
        HallType:
          $ref: '#/components/schemas/HallType'
    HallId:
      type: integer
      format: int64
      description: Идентификатор зала
      example: 1  
    HallName:
      type: string
      description: Название зала
      example: Зал №2    
    Capacity:
      type: integer
      description: Количество мест
      example: 200     
    HallType:
      type: string
      enum:
        - IMAX
        - VIP
        - Standart
      description: Тип зала
      example: Standart      
  # === Session ===                               
    Session:
      type: object
      description: Информация о сеансе
      properties:
        SessionId:
          $ref: '#/components/schemas/SessionId'
        MovieId:
          $ref: '#/components/schemas/MovieId'
        HallId:
          $ref: '#/components/schemas/HallId'
        SessionDate:
          $ref: '#/components/schemas/SessionDate'
        SessionStartTime:
          $ref: '#/components/schemas/SessionStartTime'
        SessionEndTime:
          $ref: '#/components/schemas/SessionEndTime'
        SessionFormat:
          $ref: '#/components/schemas/SessionFormat'
        NumberAvailableSeats:
          $ref: '#/components/schemas/NumberAvailableSeats'
        NumberSelectedSeats:
          $ref: '#/components/schemas/NumberSelectedSeats'
        NumberOccupiedSeats:
          $ref: '#/components/schemas/NumberOccupiedSeats'      
    SessionId:
      type: integer
      format: int64
      description: Идентификатор сеанса
      example: 123  
    SessionDate:
      type: string
      format: date
      description: Дата сеанса
      example: 2014-11-04
    SessionStartTime:
      type: string
      format: date-time
      description: Время начала сеанса
    SessionEndTime:
      type: string
      format: date-time
      description: Время завершения сеанса
    SessionFormat:
      type: string
      description: Формат сеанса
      enum:
        - 2D
        - 3D
      example: 2D
    NumberAvailableSeats:
      type: integer
      description: Количество свободных мест
      example: 12
    NumberSelectedSeats:
      type: integer
      description: Количество выбранных мест
      example: 5
    NumberOccupiedSeats:
      type: integer
      description: Количество занятых мест
      example: 42      
  # === Seat ===
    Seat:
      type: object
      description: Информация о месте в зале кинотеатра
      required:
        - SeatId
        - HallId
        - RowNumber
        - SeatNumber
        - SeatType
        - SeatPrice
      properties:
        SeatId:
          $ref: '#/components/schemas/SeatId'
        HallId:
          $ref: '#/components/schemas/HallId'
        RowNumber:
          $ref: '#/components/schemas/RowNumber'
        SeatNumber:
          $ref: '#/components/schemas/SeatNumber'
        SeatType:
          $ref: '#/components/schemas/SeatType'
        SeatPrice:
          $ref: '#/components/schemas/SeatPrice'
    SeatId:
      type: integer
      format: int64
      description: Идентификатор места
      example: 12312      
    RowNumber:
      type: integer
      description: Номер ряда
      example: 3  
    SeatNumber:
      type: integer
      description: Номер места
      example: 12 
    SeatType:
      type: string
      description: Тип места
      enum:
        - chair
        - sofa
        - disabledPersonChair   
    SeatPrice:
      type: string
      description: Стоимость места
      example: "550.00"      
  # === User ===     
    User:
      type: object
      description: Информация о пользователе
      properties:
        UserId:
          $ref: '#/components/schemas/UserId'
        UserName:
          $ref: '#/components/schemas/UserName'
        DateOfBirth:
          $ref: '#/components/schemas/DateOfBirth'
        Phone:
          $ref: '#/components/schemas/Phone'
        UserStatus:
          $ref: '#/components/schemas/UserStatus'
        BonusCardId:
          $ref: '#/components/schemas/BonusCardId'          
    UserId:
      type: integer
      format: int64
      description: Идентификатор пользователя
      example: 123         
    UserName:
      type: string
      description: Имя пользователя
      example: Иванов Иван       
    DateOfBirth:
      type: string
      format: date
      description: Дата рождения пользователя
      example: 26     
    Phone:
      type: string
      description: Номер телефона пользователя в международном формате
      pattern: \+7\(9\d{2}\)\d{3}-\d{2}-\d{2}
      example: +7(999)123-45-67          
    Email:
      type: string
      format: email
      description: Электронная почта пользователя
      default: ivanovivan@mail.ru 
    UserStatus:
      type: string
      description: Cтатус пользователя
      enum:
        - new
        - regular      
  # === Booking ===            
    Booking:
      type: object
      description: Информация о бронировании
      properties:
        BookingId:
          $ref: '#/components/schemas/BookingId'
        UserId:
          $ref: '#/components/schemas/UserId'
        SessionId:
          $ref: '#/components/schemas/HallId'
        SeatId:
          $ref: '#/components/schemas/SeatId'
        BookingDateTime:
          $ref: '#/components/schemas/BookingDateTime'
        NumberTicketsBooked:
          $ref: '#/components/schemas/NumberTicketsBooked'
        TotalCostBooking:
          $ref: '#/components/schemas/TotalCostBooking'
        Status:
          $ref: '#/components/schemas/Status'
        BonusCardId:
          $ref: '#/components/schemas/BonusCardId'
        UsedNumberBonusPoints:
          $ref: '#/components/schemas/UsedNumberBonusPoints'
        AccruedNumberBonusPoints:
          $ref: '#/components/schemas/AccruedNumberBonusPoints'
        UsedMoney:
          $ref: '#/components/schemas/UsedMoney'                        
    BookingId:
      type: integer
      format: int64
      description: Идентификатор бронирования
      example: 101112
    BookingDateTime:
      type: string
      format: date-time
      description: Дата и время бронирования
    NumberTicketsBooked:
      type: integer
      description: Количество забронированных билетов
      example: 2
    TotalCostBooking:
      type: string
      description: Общая стоимость бронирования
      example: "900.00"
    Status:
      type: string
      description: Статус
      enum:
        - confirmed
        - canceled
    UsedNumberBonusPoints:
      type: integer
      description: Количество использованных бонусных баллов
      example: 200
    AccruedNumberBonusPoints:
      type: integer
      description: Количество начисленных бонусных баллов
      example: 200
    UsedMoney:
      type: integer
      description: Количество использованных денег
      example: 350      
  # === BonusCards ===
    BonusCards:
      type: object
      description: Информация о бонусных картах
      properties:
        BonusCardId:
          $ref: '#/components/schemas/BonusCardId'
        UserId:
          $ref: '#/components/schemas/UserId'
        NumberBonusPoints:
          $ref: '#/components/schemas/NumberBonusPoints'
        BonusCardCreatedDate:
          $ref: '#/components/schemas/BonusCardCreatedDate'
    BonusCardId:
      type: integer
      format: int64
      description: Идентификатор бонусной карты
      example: 888
    NumberBonusPoints:
      type: integer
      description: Количество бонусных баллов
      example: 500
    BonusCardCreatedDate:
      type: string
      format: date-time
      description: Дата и время создания бонусной карты      
  # === BonusCardReport ===
    BonusCardReport:
      type: object
      description: Информация об ежемесячной отчетности по бонусной программе
      properties:
        BonusCardReportDate:
          $ref: '#/components/schemas/BonusCardReportDate'
        BonusCardUsageRate:
          $ref: '#/components/schemas/BonusCardUsageRate'
        BonusCardAveragePercentagePayment:
          $ref: '#/components/schemas/BonusCardAveragePercentagePayment'
        TotalBookings:
          $ref: '#/components/schemas/TotalBookings'
        TotalBookingsBonusCard:
          $ref: '#/components/schemas/TotalBookingsBonusCard'
    BonusCardReportDate:
      type: integer
      format: date
      description: Дата отчета бонусной программы
      example: 2025-12-03
    TotalBookings:
      type: integer
      description: Число бронирований
      example: 134
    TotalBookingsBonusCard:
      type: integer
      description: Число бронирований с использованием карты
      example: 97
    BonusCardUsageRate:
      type: number
      format: float
      description: Регулярность использования бонусной карты
      example: 35.5
    BonusCardAveragePercentagePayment:
      type: number
      format: float
      description: Средний процент оплаты бонусной картой 
      example: 68.4      
  # === securitySchemes ===
  securitySchemes:
    OAuth:
      type: oauth2
      flows:
        authorizationCode:
          authorizationUrl: "https://iskorkacinema.ru/oauth/authorize"
          tokenUrl: "https://iskorkacinema.ru/oauth/token" 
          scopes:
            admin: "Полный доступ администратора"
            read: "Чтение"
            write: "Чтение и запись"      
  # === responses ===      
  responses:      
  # === BadRequest ===
    BadRequest:
      description: Неправильный, некорректный запрос
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 400
              message:
                type: string
                example: Неправильный, некорректный запрос
        application/xml:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 400
              message:
                type: string
                example: Неправильный, некорректный запрос
            xml:
              name: user      
  # === Unauthorized ===                                 
    Unauthorized:
      description: Не авторизован
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 401
              message:
                type: string
                example: Не авторизован
        application/xml:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 401
              message:
                type: string
                example: Не авторизован    
            xml:
              name: user      
  # === Forbidden ===               
    Forbidden:
      description: Запрещено (не уполномочен)
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 403
              message:
                type: string
                example: Запрещено (не уполномочен)
        application/xml:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 403
              message:
                type: string
                example: Запрещено (не уполномочен)      
            xml:
              name: user      
  # === NotFound ===                           
    NotFound:
      description: Не найдено
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 404
              message:
                type: string
                example: Не найдено
        application/xml:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 404
              message:
                type: string
                example: Не найдено
            xml:
              name: user      
  # === InternalServerError ===                         
    InternalServerError:
      description: Внутренняя ошибка сервера
      content:
        application/json:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 500
              message:
                type: string
                example: Внутренняя ошибка сервера
        application/xml:
          schema:
            type: object
            properties:
              code:
                type: string
                example: 500
              message:
                type: string
                example: Внутренняя ошибка сервера
            xml:
              name: user                 